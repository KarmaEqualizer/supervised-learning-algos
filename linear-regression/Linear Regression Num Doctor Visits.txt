{
 "metadata": {
  "name": "",
  "signature": "sha256:4a7232caa1238a640ed803cddbbc6118f92ccc4e16025325f36a1a98c39f1a13"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import csv\n",
      "import numpy as np\n",
      "import statsmodels.api as sm\n",
      "import matplotlib.pyplot as plot\n",
      "from mpl_toolkits.mplot3d import Axes3D\n",
      "import pylab as pl\n",
      "\n",
      "# open csv file and get the rows\n",
      "with open('/home/vagrant/repos/datasets/health_data.csv', 'rb') as f:\n",
      "    rows = [row for row in csv.reader(f)]\n",
      "\n",
      "header = rows[0]\n",
      "data = rows[1:]\n",
      "\n",
      "print \"Total count of data rows is: \", len(data), '\\n'\n",
      "print \"Column labels are: \", '\\n', header, '\\n'\n",
      "print \"Sample data row: \", '\\n', data[0], '\\n'"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Total count of data rows is:  2039 \n",
        "\n",
        "Column labels are:  \n",
        "['AGE', ' EDUCATION_YEARS', ' INCOME_IN_TEN_THOUSANDS', ' NUM_DOC_VISITS'] \n",
        "\n",
        "Sample data row:  \n",
        "['54', '15', '.3050000', '1'] \n",
        "\n"
       ]
      }
     ],
     "prompt_number": 51
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## Cast data to floats for analysis\n",
      "input_data = np.array([\n",
      "    [float(row[0]), float(row[1]), float(row[2])] for row in data\n",
      "])\n",
      "\n",
      "## Add y-intercept constant \n",
      "input_data = sm.add_constant(input_data)\n",
      "\n",
      "#print input_data[0]\n",
      "#print target_data[0]\n",
      "\n",
      "## Cast targe_data\n",
      "target_data = np.array([float(row[3]) for row in data])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 52
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\"\"\" Part 1: Use the first three columns to predict the number of doctors visits with a linear regression model. \n",
      "No need to graph it since it'd be a 4dimensional plot. #MindExplodes\n",
      "\"\"\"\n",
      "\n",
      "# OLS stands for Ordinary Least Squares, the most common method of linear regression\n",
      "regression_model = sm.OLS(target_data, input_data)\n",
      "results = regression_model.fit()\n",
      "yhat = results.predict(input_data)\n",
      "\n",
      "# Show us some statistical summary of the model\n",
      "print results.summary()\n",
      "\n",
      "# Prediction function\n",
      "def predict(age, education, income):\n",
      "\n",
      "    \"\"\"\n",
      "    Given a fresh piece of data (age, education and income)\n",
      "    this will predict the number of doctor visits, based on our trained linear model.\n",
      "    \"\"\"\n",
      "    \n",
      "    return results.predict([1, age, education, income])\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "                            OLS Regression Results                            \n",
        "==============================================================================\n",
        "Dep. Variable:                      y   R-squared:                       0.031\n",
        "Model:                            OLS   Adj. R-squared:                  0.029\n",
        "Method:                 Least Squares   F-statistic:                     21.64\n",
        "Date:                Thu, 05 Mar 2015   Prob (F-statistic):           8.54e-14\n",
        "Time:                        19:24:20   Log-Likelihood:                -7073.4\n",
        "No. Observations:                2039   AIC:                         1.415e+04\n",
        "Df Residuals:                    2035   BIC:                         1.418e+04\n",
        "Df Model:                           3                                         \n",
        "Covariance Type:            nonrobust                                         \n",
        "==============================================================================\n",
        "                 coef    std err          t      P>|t|      [95.0% Conf. Int.]\n",
        "------------------------------------------------------------------------------\n",
        "const          4.5587      1.196      3.812      0.000         2.214     6.904\n",
        "x1             0.0911      0.016      5.528      0.000         0.059     0.123\n",
        "x2            -0.3572      0.076     -4.688      0.000        -0.507    -0.208\n",
        "x3            -1.2074      1.070     -1.128      0.259        -3.306     0.891\n",
        "==============================================================================\n",
        "Omnibus:                     1910.550   Durbin-Watson:                   1.271\n",
        "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            71635.195\n",
        "Skew:                           4.493   Prob(JB):                         0.00\n",
        "Kurtosis:                      30.612   Cond. No.                         329.\n",
        "==============================================================================\n",
        "\n",
        "Warnings:\n",
        "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## Graph the model\n",
      "\n",
      "plt.subplot(1,3,1)\n",
      "plt.scatter(input_data[:,1], target_data)\n",
      "plt.ylim( (-1, 20) ) \n",
      "plt.plot(input_data[:, 1], yhat, 'r', alpha=0.9)\n",
      "\n",
      "plt.subplot(1,3,2)\n",
      "plt.scatter(input_data[:,2], target_data)\n",
      "plt.ylim( (-1, 20) ) \n",
      "\n",
      "plt.subplot(1,3,3)\n",
      "plt.scatter(input_data[:,3], target_data)\n",
      "plt.ylim( (-1, 20) ) \n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 54,
       "text": [
        "(-1, 20)"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nR6FUAcL3AAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f5b32e2bf50>"
       ]
      }
     ],
     "prompt_number": 54
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\"\"\" Part 2: Build a linear model that only takes age and education years as the input; \n",
      "then a linear model that takes just the age and the income. \n",
      "Which model fits the data better? \n",
      "Graph data with both of those regression lines using pylab or matplotlib to visualize the results.\n",
      "\"\"\"\n",
      "\n",
      "## Age and Education data for analysis\n",
      "input_data_age_education = np.array([\n",
      "    [row[1], row[2]] for row in input_data\n",
      "])\n",
      "\n",
      "## Add y-intercept constant \n",
      "input_data_age_education = sm.add_constant(input_data_age_education)\n",
      "\n",
      "print input_data_age_education[0]\n",
      "\n",
      "# OLS stands for Ordinary Least Squares, the most common method of linear regression\n",
      "regression_model_age_education = sm.OLS(target_data, input_data_age_education)\n",
      "results_age_education = regression_model_age_education.fit()\n",
      "\n",
      "# Show us some statistical summary of the model\n",
      "print results_age_education.summary()\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[  1.  54.  15.]\n",
        "                            OLS Regression Results                            \n",
        "==============================================================================\n",
        "Dep. Variable:                      y   R-squared:                       0.030\n",
        "Model:                            OLS   Adj. R-squared:                  0.029\n",
        "Method:                 Least Squares   F-statistic:                     31.82\n",
        "Date:                Thu, 05 Mar 2015   Prob (F-statistic):           2.47e-14\n",
        "Time:                        19:35:02   Log-Likelihood:                -7074.0\n",
        "No. Observations:                2039   AIC:                         1.415e+04\n",
        "Df Residuals:                    2036   BIC:                         1.417e+04\n",
        "Df Model:                           2                                         \n",
        "Covariance Type:            nonrobust                                         \n",
        "==============================================================================\n",
        "                 coef    std err          t      P>|t|      [95.0% Conf. Int.]\n",
        "------------------------------------------------------------------------------\n",
        "const          4.4150      1.189      3.713      0.000         2.083     6.747\n",
        "x1             0.0905      0.016      5.495      0.000         0.058     0.123\n",
        "x2            -0.3785      0.074     -5.126      0.000        -0.523    -0.234\n",
        "==============================================================================\n",
        "Omnibus:                     1911.548   Durbin-Watson:                   1.271\n",
        "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            71713.701\n",
        "Skew:                           4.496   Prob(JB):                         0.00\n",
        "Kurtosis:                      30.627   Cond. No.                         321.\n",
        "==============================================================================\n",
        "\n",
        "Warnings:\n",
        "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
       ]
      }
     ],
     "prompt_number": 55
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## Age and Income data for analysis\n",
      "input_data_age_income = np.array([\n",
      "    [row[1], row[3]] for row in input_data\n",
      "])\n",
      "\n",
      "## Add y-intercept constant \n",
      "input_data_age_income = sm.add_constant(input_data_age_income)\n",
      "\n",
      "# OLS stands for Ordinary Least Squares, the most common method of linear regression\n",
      "regression_model_age_income = sm.OLS(target_data, input_data_age_income)\n",
      "results_age_income = regression_model_age_income.fit()\n",
      "\n",
      "# Show us some statistical summary of the model\n",
      "print results_age_income.summary()\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "                            OLS Regression Results                            \n",
        "==============================================================================\n",
        "Dep. Variable:                      y   R-squared:                       0.020\n",
        "Model:                            OLS   Adj. R-squared:                  0.019\n",
        "Method:                 Least Squares   F-statistic:                     21.25\n",
        "Date:                Thu, 05 Mar 2015   Prob (F-statistic):           7.35e-10\n",
        "Time:                        19:35:05   Log-Likelihood:                -7084.3\n",
        "No. Observations:                2039   AIC:                         1.417e+04\n",
        "Df Residuals:                    2036   BIC:                         1.419e+04\n",
        "Df Model:                           2                                         \n",
        "Covariance Type:            nonrobust                                         \n",
        "==============================================================================\n",
        "                 coef    std err          t      P>|t|      [95.0% Conf. Int.]\n",
        "------------------------------------------------------------------------------\n",
        "const          0.4707      0.823      0.572      0.567        -1.143     2.084\n",
        "x1             0.1002      0.016      6.089      0.000         0.068     0.132\n",
        "x2            -2.4472      1.042     -2.348      0.019        -4.491    -0.403\n",
        "==============================================================================\n",
        "Omnibus:                     1922.188   Durbin-Watson:                   1.253\n",
        "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            72930.100\n",
        "Skew:                           4.533   Prob(JB):                         0.00\n",
        "Kurtosis:                      30.861   Cond. No.                         298.\n",
        "==============================================================================\n",
        "\n",
        "Warnings:\n",
        "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
       ]
      }
     ],
     "prompt_number": 56
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"Age-Education model (R-sq: 0.030) fits the data better than Age-Income (0.020)\", '\\n'"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Age-Education model (R-sq: 0.030) fits the data better than Age-Income (0.020) \n",
        "\n"
       ]
      }
     ],
     "prompt_number": 57
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\"\"\" Part 3: Check that the two linear models from Part 2 and the linear model from Part 1 predict different \n",
      "values for the number of visits given some test data. Is the variation in the predictions consistent \n",
      "with your intuition? \"\"\"\n",
      "\n",
      "def predict(age, education, income):\n",
      "\n",
      "    \"\"\"\n",
      "    Given a fresh piece of data (age, education and income)\n",
      "    this will predict the number of doctor visits, based on our trained linear model.\n",
      "    \"\"\"\n",
      "    \n",
      "    x = results.predict([1, age, education, income])\n",
      "    if x < 0:\n",
      "        return 0\n",
      "    else:\n",
      "        return round(x)\n",
      "\n",
      "def predict_age_income(age, income):\n",
      "    x = results_age_income.predict([1, age, income])\n",
      "    if x < 0:\n",
      "        return 0\n",
      "    else:\n",
      "        return round(x)\n",
      "\n",
      "def predict_age_education(age, education):\n",
      "    x = results_age_education.predict([1, age, education])\n",
      "    if x < 0:\n",
      "        return 0\n",
      "    else:\n",
      "        return round(x)\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 64
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print predict(27, 15, 10)\n",
      "print predict_age_education(27,15)\n",
      "print predict_age_income(27, 10)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0\n",
        "1.0\n",
        "0\n"
       ]
      }
     ],
     "prompt_number": 68
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}